# JMH version: 1.35
# VM version: JDK 1.8.0_271, Java HotSpot(TM) 64-Bit Server VM, 25.271-b09
# VM invoker: D:\Java\jdk1.8.0_271\jdk1.8.0_271\jre\bin\java.exe
# VM options: -javaagent:D:\develop\IntelliJ IDEA 2022.3\lib\idea_rt.jar=63231:D:\develop\IntelliJ IDEA 2022.3\bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 2 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: top.silwings.dynamicmock.core.MockHandlerJmh.test205

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 5
# Warmup Iteration   1: 33205.049 ops/s
# Warmup Iteration   2: 37327.722 ops/s
Iteration   1: 33768.275 ops/s
Iteration   2: 37758.004 ops/s

# Run progress: 20.00% complete, ETA 00:02:49
# Fork: 2 of 5
# Warmup Iteration   1: 35018.701 ops/s
# Warmup Iteration   2: 36138.982 ops/s
Iteration   1: 34001.205 ops/s
Iteration   2: 30705.369 ops/s

# Run progress: 40.00% complete, ETA 00:02:07
# Fork: 3 of 5
# Warmup Iteration   1: 32287.880 ops/s
# Warmup Iteration   2: 31355.645 ops/s
Iteration   1: 31400.969 ops/s
Iteration   2: 35570.248 ops/s

# Run progress: 60.00% complete, ETA 00:01:24
# Fork: 4 of 5
# Warmup Iteration   1: 33869.373 ops/s
# Warmup Iteration   2: 33389.147 ops/s
Iteration   1: 32984.638 ops/s
Iteration   2: 32170.463 ops/s

# Run progress: 80.00% complete, ETA 00:00:42
# Fork: 5 of 5
# Warmup Iteration   1: 30313.919 ops/s
# Warmup Iteration   2: 31568.152 ops/s
Iteration   1: 33089.206 ops/s
Iteration   2: 34531.823 ops/s


Result "top.silwings.dynamicmock.core.MockHandlerJmh.test205":
  33598.020 ±(99.9%) 3111.726 ops/s [Average]
  (min, avg, max) = (30705.369, 33598.020, 37758.004), stdev = 2058.214
  CI (99.9%): [30486.295, 36709.746] (assumes normal distribution)


# Run complete. Total time: 00:03:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                Mode  Cnt      Score      Error  Units
MockHandlerJmh.test205  thrpt   10  33598.020 ± 3111.726  ops/s

仅解析page动态对象迭代数组-单表达式
